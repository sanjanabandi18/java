public class MergeSort{
    void merge(int a[],int beg,int mid,int end)
    {
        int i,j,k;
        int n1=mid-beg+1;
        int n2=end-mid;
        int LeftArray[]=new int[n1];
        int RightArray[]=new int[n2];
        for(i=0;i<n1;i++)
            LeftArray[i]=a[beg+i];
        for(j=0;j<n2;j++)
            RightArray[j]=a[mid+1+j];
        i=0;
        j=0;
        k=beg;
        while(i<n1 && j<n2)
        {
            if(LeftArray[i]<=RightArray[j])
            {
                a[k]=LeftArray[i];
                i++;
            }
            else
            {
                a[k]=RightArray[j];
                j++;
            }
            k++;
        }
        while(i<n1)
        {
            a[k]=LeftArray[i];
            i++;
            k++;
        }
        while(j<n2)
        {
            a[k]=RightArray[j];
            j++;
            k++;
        }
    }        
   void mergesort(int a[],int beg,int end)
   {
       if(beg<end)
       {
           int mid=(beg+end)/2;
           mergesort(a,beg,mid);
           mergesort(a,mid+1,end);
           merge(a,beg,mid,end);
       }
   }
   void PrintArray(int a[],int n)
   {
       int i;
       for(i=0;i<n;i++)
           System.out.print(a[i]+" ");
   }
   public static void main(String args[])
   {
       int a[]={11,30,24,7,31,16,39,41};
       int n=a.length;
       MergeSort m1=new MergeSort();
       System.out.println("\nBefore  MergeSort");
       m1.PrintArray(a,n);
       m1.mergesort(a,0,n-1);
       System.out.print("\nAfter MergeSort\n");
       m1.PrintArray(a,n);
       System.out.print("");
   }
}


output:

Before  MergeSort
11 30 24 7 31 16 39 41 
After MergeSort
7 11 16 24 30 31 39 41 
